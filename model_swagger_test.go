package arc

import (
  "flag"
  "testing"
  "github.com/stretchr/testify/assert"
)

func TestSwagger(t *testing.T) {
  flag.Set("alsologtostderr", "true")
  flag.Set("log_dir", ".")
  flag.Set("v", "9")
  flag.Parse()

  s := NewSwaggerSet()
  s.LoadFromFiles("etc.test/swagger")

  assert.Equal(t, int64(1), s.Count())
  assert.Equal(t, []SwaggerInfo{SwaggerInfo{Title:"Swagger Petstore", Version:"1.0.5", Description:"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."}}, s.GetList())
  assert.Equal(t, (*Swagger)(nil), s.GetByTitle("Pet", "0.0.1"))
  assert.Equal(t, &Swagger{Name:"2.0", Host:"petstore.swagger.io", Info:SwaggerInfo{Title:"Swagger Petstore", Version:"1.0.5", Description:"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."}, Servers:[]SwaggerServers(nil), Schemes:[]string{"https", "http"}, Consumes:[]string(nil), Produces:[]string(nil), Paths:map[string]SwaggerMethods{"/pet":SwaggerMethods{"post":SwaggerMethod{OperationId:"addPet", Summary:"Add a new pet to the store", Description:""}, "put":SwaggerMethod{OperationId:"updatePet", Summary:"Update an existing pet", Description:""}}, "/pet/findByStatus":SwaggerMethods{"get":SwaggerMethod{OperationId:"findPetsByStatus", Summary:"Finds Pets by status", Description:"Multiple status values can be provided with comma separated strings"}}, "/pet/findByTags":SwaggerMethods{"get":SwaggerMethod{OperationId:"findPetsByTags", Summary:"Finds Pets by tags", Description:"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."}}, "/pet/{petId}":SwaggerMethods{"delete":SwaggerMethod{OperationId:"deletePet", Summary:"Deletes a pet", Description:""}, "get":SwaggerMethod{OperationId:"getPetById", Summary:"Find pet by ID", Description:"Returns a single pet"}, "post":SwaggerMethod{OperationId:"updatePetWithForm", Summary:"Updates a pet in the store with form data", Description:""}}, "/pet/{petId}/uploadImage":SwaggerMethods{"post":SwaggerMethod{OperationId:"uploadFile", Summary:"uploads an image", Description:""}}, "/store/inventory":SwaggerMethods{"get":SwaggerMethod{OperationId:"getInventory", Summary:"Returns pet inventories by status", Description:"Returns a map of status codes to quantities"}}, "/store/order":SwaggerMethods{"post":SwaggerMethod{OperationId:"placeOrder", Summary:"Place an order for a pet", Description:""}}, "/store/order/{orderId}":SwaggerMethods{"delete":SwaggerMethod{OperationId:"deleteOrder", Summary:"Delete purchase order by ID", Description:"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"}, "get":SwaggerMethod{OperationId:"getOrderById", Summary:"Find purchase order by ID", Description:"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"}}, "/user":SwaggerMethods{"post":SwaggerMethod{OperationId:"createUser", Summary:"Create user", Description:"This can only be done by the logged in user."}}, "/user/createWithArray":SwaggerMethods{"post":SwaggerMethod{OperationId:"createUsersWithArrayInput", Summary:"Creates list of users with given input array", Description:""}}, "/user/createWithList":SwaggerMethods{"post":SwaggerMethod{OperationId:"createUsersWithListInput", Summary:"Creates list of users with given input array", Description:""}}, "/user/login":SwaggerMethods{"get":SwaggerMethod{OperationId:"loginUser", Summary:"Logs user into the system", Description:""}}, "/user/logout":SwaggerMethods{"get":SwaggerMethod{OperationId:"logoutUser", Summary:"Logs out current logged in user session", Description:""}}, "/user/{username}":SwaggerMethods{"delete":SwaggerMethod{OperationId:"deleteUser", Summary:"Delete user", Description:"This can only be done by the logged in user."}, "get":SwaggerMethod{OperationId:"getUserByName", Summary:"Get user by user name", Description:""}, "put":SwaggerMethod{OperationId:"updateUser", Summary:"Updated user", Description:"This can only be done by the logged in user."}}}}, s.GetByTitle("Swagger Petstore", "1.0.5"))
}
